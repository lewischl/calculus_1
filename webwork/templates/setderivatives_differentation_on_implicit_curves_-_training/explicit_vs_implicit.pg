##DESCRIPTION
##  Differentiate expressions using implicit differentation
##ENDDESCRIPTION

##KEYWORDS('implicit differentiation')

## DBsubject('Calculus')
## DBchapter('Derivatives')
## DBsection('Implicit differentiation')
## Date('')
## Author('silviana amethyst')
## Institution('UWEC')

########################################################################



########################################
# this file automatically moved
#	from set3.8_implicit_diff/differentiating_expressions.pg 
#	to setderivatives_differentation_on_implicit_curves/differentiating_expressions.pg 
#	on 2023-05-26 12:01:24.489989 by silviana amethyst.
# if this problem uses static images, they should also have been moved from that location to here.
# if not, look in the source directory for images that didn't make it.
########################################




########################################
# this file automatically moved
#	from setderivatives_differentation_on_implicit_curves/differentiating_expressions.pg 
#	to setderivatives_differentation_on_implicit_curves_-_training/differentiating_expressions.pg 
#	on 2023-07-01 15:08:39.906823 by silviana amethyst.
# if this problem uses static images, they should also have been moved from that location to here.
# if not, look in the source directory for images that didn't make it.
########################################


DOCUMENT();

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "PGML.pl",
   #"source.pl",        # allows code to be displayed on certain sites.
   "PGcourse.pl",      # Customization file for the course
   "parserPopUp.pl",
   "desmos.pl",
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#

$unique_div_id = "desmos_graph_embedded_in_webwork";

$width = 400;
$height = 400;

desmos_enable_construct_new();

$desmos_div = MODES(
    HTML=>qq(<div id="$unique_div_id" style="width: ${width}px; height: ${height}px;"></div>), 
    TeX=>'Interactive graph best viewed online'
);


Context("Numeric");



Context()->variables->add(
dx=>"Real", dy=>"Real", y=>"Real"
);

$ans1 = Compute("6x + 15 y^2 dy/dx");
$ans2 = Compute("y + x dy/dx");
$ans3 = Compute("28x^3 + 2(2x y^2 + 2 x^2 y dy/dx)");

##############################################################
#
#  Text
#
#

BEGIN_PGML

[@ openDiv({ "class" => "problemPurpose" }) @]*
This problem offers training on explicit functions vs implicit functions
[@ closeDiv() @]*


---

## Explicit vs implicit functions

### Explicit functions give you a single rule to generate [`y`]

[@ openDiv({ "class" => "importantFormula" }) @]*
When we can relate two variables [`x`] and [`y`] through an equation like

[`` y = f(x) ``]

we say that [`y`] is an "explicit function" of [`x`].
[@ closeDiv() @]*

We use the word "explicit" because we know how to compute [`y`] if we have [`x`]: just plug into the formula [`f(x)`] and ðŸ’¥ we have [`y`].

Examples of explicit functions:

* [`y = \sqrt{x}`]
* [`y = \sin(x) `]
* [`y = x^2 + x^4 - 1237`]

Given an [`x`], we know how to compute [`y`].  


END_PGML


$running_example = "x^{3}y^{2}+3x^{2}y=5";

BEGIN_PGML
### Implicit don't give us formulas to generate [`y`]

[@ openDiv({ "class" => "importantFormula" }) @]*
When 
* [`x`] and [`y`] are not explicitly related but 
* there's still an equality relationship between expressions of [`x`] and [`y`]

we say that [`y`] is an "implicit function" of [`x`].  These expressions look like

[`` f(x,y) = g(x,y)``]

[@ closeDiv() @]*

For example,

* [`x^2 + y^2 = 1`]
* [` \sqrt{x} + \sqrt{y} = 1`]
* [` [$running_example] `]

Part of the point of this problem is to help you understand why we call them "implicit functions", and why 
* we want to write [`y = y(x)`] even without an explicit formula
* we want to be able to find slopes of tangent lines on these kinds of curves



---

## Every explicit function can be written implicitly

One of my first steps when teaching implicit curves make the connection that we've already kind of been doing this.

[@ openDiv({ "class" => "importantFormula" }) @]*
To put an explicit curve into implicit form, move everything from the right hand side to the left by subtracting, to go from

[` y = f(x) `] 

to 

[`y - f(x) = 0`]

[@ closeDiv() @]*

END_PGML

$f1 = Formula("sin(3x+4)+ x");
$f2 = Formula("x^2 + 3x + 7");
$f3 = Formula("(x^2-1)^{1/2}");

BEGIN_PGML
Rewrite these explicit functions into implicit form:

* [`y = [$f1]`]    
    can be written implicitly as    
    [__]{Formula("y - $f1")} [` = 0 `]


* [`y = [$f2]`]    
    can be written implicitly as    
    [__]{Formula("y - $f2")} [` = 0 `]
    

* [`y = [$f3]`]    
    can be written implicitly as    
    [__]{Formula("y - $f3")} [` = 0 `]




---

## Implicit functions often violate the vertical line test

One of the main benefits (and drawbacks!) of implicit functions is that their graphs violate the vertical line test, which says that a "function" intersects a vertical line *at most once*.

Here's a graph of the implicit curve [`[$running_example]`].


END_PGML


$col2a = "
We're thinking of \(x\) as the independent variable.  $PAR$BR

ðŸ‘€ Look at \(x= 2\) on the graph.  Find the \(y\)-values associated with \(x= 2\) by clicking on the graph and moving cursor around.
$PAR
There are " . ans_rule(10) .  " \(y\)-values at \(x = 2\), and their values are " . ans_rule(10) . ".  $BR(Use a comma separated list)";

$col2b = "$PAR$BR 
We just concluded that this implicit curve isn't a *function* in the strict sense.  But if you only look at part of the graph at a time (put on your horse blinders!), pieces of it *are* functions. 

$PAR$BR

Another way of putting it, \(y = y(x)\), but only locally.  $BR
\(y\) is an implicit function of \(x\).
";



$col2 = $col2a . $col2b;

TEXT( ColumnTable( $desmos_div, $col2));
ANS(Compute(2)->cmp);
ANS(List((0.34, -1.84))->cmp);

BEGIN_PGML

---

## The goal: compute slopes of tangent lines, even without an explicit function

In our running example [`[$running_example]`] we have a "local function".  Given an [`x`] we can compute some [`y`]'s, at least if we have more tools.  What we can't always do is find a formula that tells us them.  

From the graph, I hope you can see that tangent lines exist.  They have slopes.  If we are just told the point at which to compute the slope, we should be able to do it.


END_PGML


$inc = "increasing";
$dec = "decreasing";
$neither = "neither";
$nd = "not differentiable";

sub isit{
my $choice = shift @_;
return PopUp(["?", $inc, $dec,  $neither, $nd], $choice);
};



BEGIN_PGML

[@ openDiv({ "class" => "promptOrInstruction" }) @]*

To demonstrate, I'll ask a few questions  about the graph.  I'm returning to the connection between *slope of the tangent line* and the notion of *increasing/decreasing*.

For the local graph around the points, answer the questions:

[@ closeDiv() @]*

(these coordinates are all approximate)

* At  [`(-2.224,0.68 )`], is the local branch of the implicit function increasing or decreasing?  [__]{isit($nd)}
* At  [`(1, 1.193)`], is the local branch of the implicit function increasing or decreasing?  [__]{isit($dec)}
* At  [`(5, -0.661)`], is the local branch of the implicit function increasing or decreasing?  [__]{isit($inc)}
* What's the limit as [`x \to \pm \infty`] of all of the branches of the implicit curve [`[$running_example]`]?  [_]{Compute(0)}


See!  We can answer all of these questions, and we don't even have an explicit function for [`y`] in terms of [`x`].  
END_PGML























############################################################################################

$bound = 10;

TEXT( MODES(TeX=>'', HTML=><<END_SCRIPT ) );
<script>

    var elt = document.getElementById("$unique_div_id");

    var calculator = Desmos.Calculator(elt, {
        keypad: false, 
        expressions: false,
        settingsMenu: false, 
        expressionsTopbar: false,
        zoomButtons: false
    });

    calculator.setExpressions([
        { id: 'implicitcurve', latex: '$running_example', color: Desmos.Colors.BLUE },
    ]);
    
    calculator.setMathBounds({
      left: -$bound,
      right: $bound,
      bottom: -$bound,
      top: $bound
    });


</script>
END_SCRIPT


ENDDOCUMENT();
