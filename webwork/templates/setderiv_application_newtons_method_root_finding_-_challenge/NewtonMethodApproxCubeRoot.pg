##DESCRIPTION
## Calculus problem: Newton's Method problem to approximate a root
##ENDDESCRIPTION

##KEYWORDS('calculus', 'approximation', 'derivative')

## DBsubject('Calculus')
## DBchapter('Applications of the Derivative')
## DBsection('Newtons's Method')
## Date('8/2/2022, summer 2023')
## Author('Erich Jauch, silviana amethyst')
## Institution('')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('4')

########################################################################



########################################
# this file automatically moved
#	from set4.8_newtons_method/NewtonMethodApproxSquareRoot.pg 
#	to setderiv_application_newtons_method_root_finding/NewtonMethodApproxSquareRoot.pg 
#	on 2023-05-26 12:01:24.489989 by silviana amethyst.
# if this problem uses static images, they should also have been moved from that location to here.
# if not, look in the source directory for images that didn't make it.
########################################




########################################
# this file automatically moved
#	from setderiv_application_newtons_method_root_finding/NewtonMethodApproxSquareRoot.pg 
#	to setderiv_application_newtons_method_root_finding_-_training/NewtonMethodApproxSquareRoot.pg 
#	on 2023-07-01 15:08:39.906823 by silviana amethyst.
# if this problem uses static images, they should also have been moved from that location to here.
# if not, look in the source directory for images that didn't make it.
########################################


DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "PGML.pl",
   #"source.pl",        # allows code to be displayed on certain sites.
   "PGcourse.pl",      # Customization file for the course
   "PGuwecTikZutils.pl", #Custom TikZ code
   "PGauxiliaryFunctions.pl", #Extra functions
);
# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#
Context("Numeric");
Context('Numeric')->flags->set(
    tolerance => 1e-4,
    tolType   => 'absolute',
);

$a = random(2,5,1);
$n = random(3,7,1);

# Defines polynomial for finding root
$f = Formula("x^$n - $a")->reduce;
$fprime = $f->D('x');

# Defines answer as postive root
$ans = Real($a**(1/$n));

$x0 = int($ans)+1;

$x[0] = $x0;

@f = ();
@fprime = ();

foreach my $i (0..3) {
$j = $i+1;
$f[$i] = $f->eval(x=>$x[$i]);
$fprime[$i] = $fprime->eval(x=>$x[$i]);
$x[$j] = $x[$i] - $f[$i]/$fprime[$i];
}





##############################################################
#
#  Text
#
#

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());
BEGIN_PGML


[@ openDiv({ "class" => "promptOrInstruction" }) @]*
Use Newton's Method to approximate [`\sqrt[[$n]]{[$a]}`].
[@ closeDiv() @]*

ðŸŽ¯ The function we'll use is [__]{$f}.

We need a starting point for Newton's method.  Choose the next integer larger than [`\sqrt[[$n]]{[$a]}`] for [`x_0`].

[`x_0 = `] [_]{Real($x[0])}

ðŸŽ¯ Do a few iterations of Newton's method:

* [`x_1 = `] [_]{$x[1]}
* [`x_2 = `] [_]{$x[2]}
* [`x_3 = `] [_]{$x[3]}


ðŸŽ¯ Keep doing approximations until it converges to the accuracy of your calculator.

Thus, we know, without ever actually taking a root but only using polynomial functions, 

[`\sqrt[[$n]]{[$a]}\approx`] [____]{$ans}


END_PGML



##############################################################
#
#  Solutions
#
#

@x = ();
@f = ();
@fprime = ();

$x[0] = int(sqrt($a))+1;

# Constructs 4 approximations
foreach my $i (0..3) {
$j = $i+1;
$f[$i] = $f->eval(x=>$x[$i]);
$fprime[$i] = $fprime->eval(x=>$x[$i]);
$x[$j] = $x[$i] - $f[$i]/$fprime[$i];
}

Context()->variables->add(xn => ['Real',TeX=>"x_n"]);
$fn = $f->substitute(x => "xn");
$fprimen = $fprime->substitute(x => "xn");


#Deterime how many approximations where needed and display the correct number in solution
@test = ();

foreach my $i (0..3) {
$j = $i + 1;
$test[$i] = Compute("abs($x[$j] - $x[$i])");
}


$solution_text =<<EOS
So if we input [`x_0=$x[0]`], we get

[`\displaystyle x_1=$x[0] - \frac{$f[0]}{$fprime[0]}=$x[1]`]

[`\displaystyle x_2=$x[1] - \frac{$f[1]}{$fprime[1]}=$x[2]`]

[`\displaystyle x_3=$x[2] - \frac{$f[2]}{$fprime[2]}=$x[3]`]

We keep going until two consectutive values are near each other, concluding [`x_*\approx=$ans`] up to 5 decimal places.
EOS
;


BEGIN_PGML_SOLUTION
We begin that recalling that the Newton's Method says that

[`\displaystyle x_{n+1}=x_n-\frac{f(x_n)}{f^\prime(x_n)}=x_n - \frac{[$fn]}{[$fprimen]}`]

We need to choose a [`x_0`], and typical choice for these problems is the nearest integer above [`\sqrt{[$a]}`]. Which is [`[$x[0]]`] in this case.

[$solution_text]**
END_PGML_SOLUTION

ENDDOCUMENT();        
