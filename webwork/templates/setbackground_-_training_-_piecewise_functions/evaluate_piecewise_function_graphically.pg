##DESCRIPTION
##  Piecewise Functions: Evaluating
##ENDDESCRIPTION


## Author1('David Covert')
## Author2('Teri Christiansen')
## Author3('Rick Lynch')
## Author3('silviana amethyst')
## DBsubject(Algebra)
## DBchapter(Functions)
## DBsection(Piecewise functions)
## Date(Spring 2012, Summer 2023)
## Institution(University of Missouri, University of Wisconsin Eau Claire)
## MLT(evaluateAtPoint)
## MLTleader(1)
## Level(1)
## MO(1)
## TitleText1('College Algebra')
## AuthorText1('Beecher, Penna, Bittinger')
## EditionText1('4')
## Section1('2.1')
## Problem1('')
## KEYWORDS('algebra', 'piecewise', 'function')
########################################
#  Initialization



########################################
# this file automatically moved
#	from local/0.4_simplifying_more/evaluate_piecewise_function.pg 
#	to setreview_simplifying/evaluate_piecewise_function.pg 
#	on 2023-05-26 12:01:24.489989 by silviana amethyst.
# if this problem uses static images, they should also have been moved from that location to here.
# if not, look in the source directory for images that didn't make it.
########################################




########################################
# this file automatically moved
#	from setreview_simplifying/evaluate_piecewise_function_graphically.pg 
#	to setbackground_-_training_-_piecewise_functions/evaluate_piecewise_function_graphically.pg 
#	on 2023-07-01 15:08:39.906823 by silviana amethyst.
# if this problem uses static images, they should also have been moved from that location to here.
# if not, look in the source directory for images that didn't make it.
########################################


DOCUMENT();

loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "parserImplicitPlane.pl",
  "PGcourse.pl",
  "customCSS.pl",
  "PGML.pl",
  "PGuwecTikZutils.pl", #Custom TikZ code
);

TEXT(beginproblem());


#######################################
#  Set-up
Context("Numeric");


## Coefficients
$a = random(-1,1,2)*random(2,10,1);
$b = random(2,10,1);
do {$c = random(2,7,1)} until (2*$c != $b - $a);
$e1 = $c - random(2,7,1);
$e2 = $c;
$e3 = $c + random(2,7,1);





@f = ();
$f[0] = Formula("x + $a");  # using inf < x <= f_transition1
$f[1] = Formula("$b - x");  # using f_transition1 < x < f_transition2
$f[2] = Formula("x - $b"); # using f_transition2 <= inf

# transition points between pieces
$f_transition1 = random(-4,-1,1); 
$f_transition2 = $f_transition1 + random(1,4,1); 

# evaluate at a point in each interval
$x_eval0 = random($f_transition1-3, $f_transition1-1, 1);
$x_eval1 = random($f_transition1+1, $f_transition2-1, 1);
$x_eval2 = random($f_transition2+1, $f_transition2+4, 1);

# have them evaluate at the transition points
$x_eval3 = $f_transition1;
$x_eval4 = $f_transition2;


@fxlim = ($x_eval0-2, $x_eval2+2);


@f_vals_at_transitions = ($f[0]->eval(x=>$fxlim[0]), $f[0]->eval(x=>$f_transition1),
                        $f[1]->eval(x=>$f_transition1), $f[1]->eval(x=>$f_transition2),
                        $f[2]->eval(x=>$f_transition2), $f[2]->eval(x=>$fxlim[1]));




@fylim = (array_min(@f_vals_at_transitions)-1,array_max(@f_vals_at_transitions)+1);

$tick = 1;




$graph = GraphWithTikZ(
                function => [
                             [$f[0],dmin => $fxlim[0],dmax => $f_transition1,rightEnd => 'closed'],
                             [$f[1],dmin => $f_transition1,dmax => $f_transition2,leftEnd => 'open',rightEnd => 'open'],
                             [$f[2],dmin => $f_transition2, dmax=> $fxlim[1], leftEnd =>'closed']
                            ],
  # transition points                          
points => [[Point( ($f_transition1,$f[1]->eval(x=>$f_transition1)) ),color=>"white",label=>" "], # empty circle to make empty
           [Point( ($f_transition2,$f[1]->eval(x=>$f_transition2)) ),color=>"white",label=>" "]
          ],
    xmin => $fxlim[0],xmax => $fxlim[1],ymin =>$fylim[0],ymax =>$fylim[1],smooth=>'smooth',ytick => 1,xtick => $tick);
    
    
    
    
    

## Answers
$ans1 = $f[0]->eval(x=>$x_eval0);
$ans2 = $f[1]->eval(x=>$x_eval1);
$ans3 = $f[2]->eval(x=>$x_eval2);

$ans4 = $f[0]->eval(x=>$x_eval3);
$ans5 = $f[2]->eval(x=>$x_eval4);















# set up the training graph




$g_transition1 = random(-4,-1,1); 
$g_transition2 = $g_transition1 + random(1,4,1); 


@g = ();
$g[0] = Formula("3x-1");  # using inf < x <= g_transition1
$g[1] = Formula("x^2-8");  # using g_transition1 < x < g_transition2
$g[2] = Formula("-1x+2"); # using g_transition2 <= inf

@xlim = ($g_transition1-2, $g_transition2+2);


@vals_at_transitions = ($g[0]->eval(x=>$xlim[0]), $g[0]->eval(x=>$g_transition1),
                        $g[1]->eval(x=>$g_transition1), $g[1]->eval(x=>$g_transition2),
                        $g[2]->eval(x=>$g_transition2), $g[2]->eval(x=>$xlim[1]));


@ylim = (array_min(@vals_at_transitions)-1,array_max(@vals_at_transitions)+1);

$tick = 1;



$x_eval_example = random($g_transition1, $g_transition2, 0.5);
while ($x_eval_example == 0){
    $x_eval_example = random($g_transition1, $g_transition2, 0.5);
}
$g_eval_example = $g[1]->eval(x=>$x_eval_example);


$graph_example = GraphWithTikZ(
                function => [
                             [$g[0],dmin => $xlim[0],dmax => $g_transition1,rightEnd => 'closed'],
                             [$g[1],dmin => $g_transition1,dmax => $g_transition2,leftEnd => 'open',rightEnd => 'open'],
                             [$g[2],dmin => $g_transition2, dmax=> $xlim[1], leftEnd =>'closed']
                            ],
  # transition points                          
points => [[Point( ($g_transition1,$g[1]->eval(x=>$g_transition1)) ),color=>"white",label=>" "], # empty circle to make empty
           [Point( ($g_transition2,$g[1]->eval(x=>$g_transition2)) ),color=>"white",label=>" "],
           
           [Point( ($x_eval_example,$g_eval_example)),color=>"red",label=>" "]
          ],
    xmin => $xlim[0],xmax => $xlim[1],ymin =>$ylim[0],ymax =>$ylim[1],smooth=>'smooth',ytick => 1,xtick => $tick);


$lcb = "\{";
Context("Numeric");
################################################
#  Main text

BEGIN_TEXT

\{ openDiv({ "class" => "problemPurpose" }) \}
This problem is about evaluating a piecewise defined function using graphical methods.
\{ closeDiv() \}

$PAR

\{ openDiv({ "class" => "importantFormula" }) \}
To evaluate a piecewise function given its graph, first determine which branch of the function the input corresponds to by placing the input value on the \(x\)-axis.  $BR

Then evaluate the corresponding branch by finding the height on the \(y\)-axis.
\{ closeDiv() \}

$PAR

For example, suppose we're given the following graph of a piecewise function \(g\):
END_TEXT

BEGIN_PGML

>>[@ image(insertGraph($graph_example), width => 400, height => 400) @]*<<

END_PGML

BEGIN_TEXT

and we want to evaluate \(g($x_eval_example)\). 

$PAR

First we have to consider which part of the domain \(x = $x_eval_example\) lives in.  On the horizontal axis, see that \($x_eval_example\) is greater than \($g_transition1\) but less than \($g_transition2\).  So we use the branch corresponding to condition \( $g_transition1 < x < $g_transition2\). 

$PAR

Then we do the evaluation.  We look to the height of the function along the vertical axis, and find that \(g($x_eval_example) \approx $g_eval_example\).  I've marked the point on the graph in a solid dot.


$PAR$HR$PAR
A piecewise function \(f\) is defined by the graph below:

$PAR

END_TEXT

BEGIN_PGML

>>[@ image(insertGraph($graph), width => 400, height => 400) @]*<<

END_PGML

BEGIN_TEXT


\{ openDiv({ "class" => "promptOrInstruction" }) \}
Find the following function values.
\{ closeDiv() \}

$PAR

$SPACE \(f($x_eval0) = \) \{ans_rule(10)\} $BR
$SPACE \(f($x_eval1) = \) \{ans_rule(10)\} $BR
$SPACE \(f($x_eval2) = \) \{ans_rule(10)\} $BR
$SPACE \(f($x_eval3) = \) \{ans_rule(10)\} $BR
$SPACE \(f($x_eval4) = \) \{ans_rule(10)\} $BR


END_TEXT


ANS( Compute($ans1)->cmp() );
ANS( Compute($ans2)->cmp() );
ANS( Compute($ans3)->cmp() );
ANS( Compute($ans4)->cmp() );
ANS( Compute($ans5)->cmp() );

################################################
#  Answer evaluation

$showPartialCorrectAnswers = 1;


COMMENT('Evaluate piecewise function at a point');
ENDDOCUMENT();
