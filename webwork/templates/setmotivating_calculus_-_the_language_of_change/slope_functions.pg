##DESCRIPTION
##  Arithemetic problem: give the value of pi
##ENDDESCRIPTION

##KEYWORDS('rates of change', 'slope', 'slope function')

## DBsubject('calculus')
## DBchapter('rates of change')
## DBsection('rates of change')
## Date('summer 2023')
## Author('silviana amethyst')
## Institution('uwec')

########################################################################

DOCUMENT();

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "PGML.pl",
   #"source.pl",        # allows code to be displayed on certain sites.
   "PGcourse.pl",      # Customization file for the course
   "customCSS.pl",
  "PGuwecTikZutils.pl", #Custom TikZ code
  "parserPopUp.pl",   # <--------------------------------------NEEDED FOR DROPDOWN MENUS
  'PGchoicemacros.pl',
);

loadMacros("niceTables.pl");




# some stuff for enabling desmos
$unique_div_id = "programmatically_constructed_desmos";
$width = 400;
$height = 300;

HEADER_TEXT(MODES(
    HTML=>'<script src="https://www.desmos.com/api/v1.9/calculator.js?apiKey=dcb31709b452b1cf9dc26972add0fda6"></script>',
    TeX=>''
));

$desmos_graph = MODES(
    HTML=>qq(<div id="$unique_div_id" style="width: ${width}px; height: ${height}px;"></div>), 
    TeX=>'Desmos graph best viewed online'
);




# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#
Context("Numeric");
Context()->normalStrings;

$pi = Real("pi");


$a = random(-4,0,1);
$b = $a + random(1,3,0.5);
$c = $b + random(1,3,0.5);

$f_as_string = "(x-$a)*(x-$b)*(x-$c)";
$f = Formula($f_as_string);

$crit1 = 1/3*(-sqrt($a**2-$a*($b+$c) + $b**2 - $b*$c + $c**2) + $a + $b + $c );
$crit2 = 1/3*( sqrt($a**2-$a*($b+$c) + $b**2 - $b*$c + $c**2) + $a + $b + $c );


@pts_for_slope = ($a-0.5, $a, $crit1, ($a+$b)/2, $b, $crit2, $crit2+0.5);
$n_pts_for_slope = @pts_for_slope;

@slopes = ();
for my $i (0..($n_pts_for_slope-1)){
    $slopes[$i] = $f->D->eval(x=>$pts_for_slope[$i]);
}


@xlim = ($a-1, $c+1);
$xmin = $xlim[0];
$xmax = $xlim[1];

@fvals_for_view = ($f->eval(x=>$xmin), $f->eval(x=>$crit1), $f->eval(x=>$crit2), $f->eval(x=>$xmax));

$ymin = array_min(@fvals_for_view) - 10;
$ymax = array_max(@fvals_for_view) + 10;




$ytick = 2;
$xtick = 1;


   
 
   
Context()->texStrings;
   
sub classification {
my $dval = shift(@_);
my $ans = '';


if (abs($dval) < 1e-3){
    $ans = "zero (horizontal)";}
elsif ($dval > 0){
    $ans = "positive";
  }
  else{
  $ans = "negative";
  }

  
return PopUp(
  ["choose one","positive","negative", "zero (horizontal)"],  # options
  $ans);    # correct answer.  must match string in options exactly
}



@class = ();

for my $i (0..($n_pts_for_slope-1)){
$class[$i] = classification( $slopes[$i]);
}


@possible_derivatives = ();
$possible_derivatives[0] = $f->D;
$possible_derivatives[1] = $f->D + 5;
$possible_derivatives[2] = -$f->D;
$possible_derivatives[3] = -$f->D - 5;



# get set up to present the graphs in random order

$k = random(0, 3);

@letter = ("A", "B", "C", "D");

@perm = shuffle(4);

@inv  = invert(@perm);

@letters_perm = @letter[@perm];
@letters_invperm = @letter[@inv];


@graphs = ();
 # loop for graphs
for my $i (0..3){
    $graphs[$i] = GraphWithTikZ(function => [   # functions are an array of "Formula" objects.  dmin and dmax set the values for evaluation for plotting.  stay away from infinite discontinuities!!!
                                         [$possible_derivatives[$i],dmin => $xlim[0],dmax => $xlim[1],label=>"$letters_invperm[$i]"],
                                        ],
    points => [],
        xmin => $xlim[0],xmax => $xlim[1],ymin =>$ymin,ymax =>$ymax, # axis limits.  these should be computed, as in this example
        smooth=>'smooth', #smooth, not cornery
        ytick => $ytick,xtick => $xtick,useLegend=>1); # where to mark the axis.  xtick, ytick is the distance between marks.  they do not have to be the same.

} # loop for graphs

# actually do the shuffle
@graphs  = @graphs[@perm];



$popup = PopUp([ "?", "A", "B", "C", "D" ], $letter[ $inv[$k] ]);


$medium_h = 300; # used for the cubic
$medium_w = 400;

$small_h = 200;
$small_w = 300;

$tab = LayoutTable(
    [
        [ image(insertGraph($graphs[0]), width => $small_w, height => $small_h), 
          image(insertGraph($graphs[1]), width => $small_w, height => $small_h) ],
        [ image(insertGraph($graphs[2]), width => $small_w, height => $small_h), 
          image(insertGraph($graphs[3]), width => $small_w, height => $small_h) ],
    ],
    texalignment => 'cc'
);


##############################################################
#
#  Text
#
#
    
    Context()->texStrings;
    
BEGIN_PGML

[@ openDiv({ "class" => "problemPurpose" }) @]*
Calculus is the language of change, and this means studying relationships between graphs.  One of the most important relationships is between a graph and its slope, because the slope tells us the rate of change.
[@ closeDiv() @]*

---

Consider the following graph of a function [`f`] (I'm not giving you the formula or axes because they're not important).

>> [@ $desmos_graph @]* <<

Imagine that at a point of interest, we replace the graph of [`f`] with a line that closely fits.  We use the slope of this line as the slope of [`f`] at that point.  

[@ openDiv({ "class" => "importantFormula" }) @]*
* If a graph is increasing, its slope is positive
* If a graph is decreasing, its slope is negative
* If a graph is horizontal at a point, its slope is [`0`].
[@ closeDiv() @]*

Indicate whether the graph above has positive slope, negative slope, or slope [`0`] at the following points:



[@
DataTable(
[
    ['slope of \(f\) at ', '\( x = '. sprintf('%.3g',$pts_for_slope[0]) .'\) ' , ' is ', $class[0]->menu()],
    ['slope of \(f\) at ', '\( x = '. sprintf('%.3g',$pts_for_slope[1]) .'\) ' , ' is ', $class[1]->menu()],
    ['slope of \(f\) at ', '\( x = '. sprintf('%.3g',$pts_for_slope[2]) .'\) ' , ' is ', $class[2]->menu()],
    ['slope of \(f\) at ', '\( x = '. sprintf('%.3g',$pts_for_slope[3]) .'\) ' , ' is ', $class[3]->menu()],
    ['slope of \(f\) at ', '\( x = '. sprintf('%.3g',$pts_for_slope[4]) .'\) ' , ' is ', $class[4]->menu()],
    ['slope of \(f\) at ', '\( x = '. sprintf('%.3g',$pts_for_slope[5]) .'\) ' , ' is ', $class[5]->menu()],
    ['slope of \(f\) at ', '\( x = '. sprintf('%.3g',$pts_for_slope[6]) .'\) ' , ' is ', $class[6]->menu()],
],
align => 'l  l l',
tablecss => "border:solid 1px; border-spacing:10px 5px; border-radius: 5px; border-collapse:separate;"
);
@]***

END_PGML

for $i (0..($n_pts_for_slope-1)){
ANS( $class[$i]->cmp() );
}


BEGIN_PGML

---




[@ $tab @]*

Based on the above observations, select the one of the following graphs that could be a "slope function", which tells is the slope of the given function at the corresponding [`x`]-value.  Remember, 
* if the original function is increasing at a point, the slope function should be positive at that same point.
* if the original function is decreasing at a point, the slope function should be negative at that same point.

Candidate [___]{$popup} is the slope function.


END_PGML













Context()->normalStrings;

$d = '$';

TEXT( MODES(TeX=>'', HTML=><<END_SCRIPT ) );
<script>

    var arstarst = document.getElementById("$unique_div_id");

    var my_calculator = Desmos.Calculator(arstarst, {
        keypad: false, 
        expressions: false, 
        settingsMenu: true, 
        expressionsTopbar: false,
        zoomButtons: false, lockViewport: false,
        showGrid: true,
        showXAxis: true, showYAxis: false,
    });

    my_calculator.setExpressions([
        { id: 'f', latex: 'f(x)=$f_as_string', secret:false, color:Desmos.Colors.BLUE},
        { id: 'slope', latex: 'p=f\'(a)', secret:false},
        { id: 'ycoord', latex: 'b=f(a)', secret: false},
        { id: 'slider', latex: 'a=0', sliderBounds: {min: $xmin, max: $xmax, step: 0.01}, secret:false},
        { id: 'base_point', latex: '(a, b)', label: 'slope of f: $d\{p\}', showLabel: true, secret:false, color:Desmos.Colors.RED},
        { id: 'base_point2', latex: '(a, $ymin+4)', label: 'x=$d\{a\}', showLabel: true, secret:false, color:Desmos.Colors.RED, hidden:true},
        { id: 'tangent_line', latex: 'y = f\'(a)*(x-a) + f(a)', label: 'tangent line', secret:false, color:Desmos.Colors.GREEN, lineStyle:Desmos.Styles.DASHED},
        
        
    ]);
    
    my_calculator.setMathBounds({
      left: $xmin,
      right: $xmax,
      bottom: $ymin,
      top: $ymax
    });
    
    my_calculator.updateSettings({ fontSize: Desmos.FontSizes.SMALL });
    
    var state = my_calculator.getState();
</script>
END_SCRIPT






ENDDOCUMENT();
