##DESCRIPTION
## Tagged by jjh2b

## DBsubject(Calculus - single variable)
## DBchapter(Limits and continuity)
## DBsection(Infinite limits and vertical asymptotes)
## Date(5/10/2008)
## Institution(University of Rochester)
## Author(Paul Pearson)
## MLT(findva)
## MLTleader(1)
## Level(2)
## TitleText1('Calculus: Early Transcendentals')
## AuthorText1('Stewart')
## EditionText1('6')
## Section1('2.6')
## Problem1('')
## TitleText2('Calculus: Early Transcendentals')
## AuthorText2('Stewart')
## EditionText2('5')
## Section2('4.5')
## Problem2('')
## KEYWORDS('sample','infinite', 'limit', 'vertical', 'asymptote','calculus', 'derivatives')



########################################
# this file automatically moved
#	from local/Library/./Rochester/instructiveProblems/AnotherConditionalQuestion.pg 
#	to setlimits_at_infinity/AnotherConditionalQuestion.pg 
#	on 2023-05-26 12:01:24.489989 by silviana amethyst.
# if this problem uses static images, they should also have been moved from that location to here.
# if not, look in the source directory for images that didn't make it.
########################################




########################################
# this file automatically moved
#	from setlimits_at_infinity/AnotherConditionalQuestion.pg 
#	to setlimits_at_infinity_-_training/AnotherConditionalQuestion.pg 
#	on 2023-07-01 15:08:39.906823 by silviana amethyst.
# if this problem uses static images, they should also have been moved from that location to here.
# if not, look in the source directory for images that didn't make it.
########################################


DOCUMENT();

loadMacros(
  "PGstandard.pl",
  "PGchoicemacros.pl",
  "extraAnswerEvaluators.pl",
  "PGcourse.pl",
  "customCSS.pl",
);

COMMENT("a two-part problem where the second part is revealed after the first part is correctly solved");
COMMENT("todo: make this a scaffolded problem");

TEXT(beginproblem());

$showPartialCorrectAnswers = 1;

$sign = random(-1,1,2);
$a = $sign*random(2,7,1);
$b = random(2,7,1);
$bs = $b**2;
$twiceabsq = 2*$a*$bs;

# the function and its derivatives
$ftex = "\frac{$a x^2}{x^2 - $bs }";
$fp = "- $twiceabsq * x / ((x**2 - $bs)**2)";



BEGIN_PGML

[@ openDiv({ "class" => "problemPurpose" }) @]*
This problem aims to build the connection between vertical asymptotes and limits with value infinity.  This stands in contrast to limits *at* infinity, which has to do with *horizontal* asymptotes.
[@ closeDiv() @]*

[@ openDiv({ "class" => "inProblemHint" }) @]*
This problem has two parts.  The second part will appear after you answer the first part correctly.
[@ closeDiv() @]*
END_PGML


BEGIN_TEXT

$PAR$HR$PAR

What are the vertical asymptotes of \( \displaystyle f(x) = $ftex \)?  Your answer should be a number, a list of numbers separated by commas, or ${BITALIC}None${EITALIC}.
$PAR
Vertical asymptotes at \( x = \) \{NAMED_ANS_RULE('ans_1',40) \}
$BR

END_TEXT

$ans_1_eval = number_list_cmp("-$b,$b");
# WebWork returns an error if you use fun_cmp
# $ans_1_eval = fun_cmp("$fp");
NAMED_ANS(ans_1 => $ans_1_eval);
$Answer_1 = $inputs_ref->{ans_1}; 
$rh_ans_hash = $ans_1_eval->evaluate($Answer_1);

# warn pretty_print($rh_ans_hash);  # for debugging the ans_hash


if (1 == $rh_ans_hash->{score} ) {

BEGIN_TEXT
$PAR
$HR
$PAR
Find the following left- and right-hand limits.   
$PAR
\( \displaystyle \lim_{x \rightarrow -$b^{-}} $ftex = \) \{NAMED_ANS_RULE('ans_2',10)\} 
$PAR
\( \displaystyle \lim_{x \rightarrow -$b^{+}} $ftex = \) \{NAMED_ANS_RULE('ans_3',10)\} 

$PAR


\( \displaystyle \lim_{x \rightarrow $b^{-}} $ftex = \) \{NAMED_ANS_RULE('ans_4',10)\} 
$PAR
\( \displaystyle \lim_{x \rightarrow $b^{+}} $ftex = \) \{NAMED_ANS_RULE('ans_5',10)\} 


END_TEXT

if ($sign == 1) {

Context("Numeric");

NAMED_ANS(ans_2 => (Infinity)->cmp(strings=>['DNE']) ); 
NAMED_ANS(ans_3 => (-Infinity)->cmp(strings=>['DNE']) ); 
NAMED_ANS(ans_4 => (-Infinity)->cmp(strings=>['DNE']) ); 
NAMED_ANS(ans_5 => (Infinity)->cmp(strings=>['DNE']) ); 

} else {

NAMED_ANS(ans_2 => (-Infinity)->cmp(strings=>['DNE']) ); 
NAMED_ANS(ans_3 => (Infinity)->cmp(strings=>['DNE']) ); 
NAMED_ANS(ans_4 => (Infinity)->cmp(strings=>['DNE']) ); 
NAMED_ANS(ans_5 => (-Infinity)->cmp(strings=>['DNE']) ); 

}

}  

ENDDOCUMENT();

# Using named answers allows for more control.  Any unique label can be
# used for an answer.    
# (see http://webwork.math.rochester.edu/docs/docs/pglanguage/pgreference/managinganswers.html
# for more details on answer evaluator formats and on naming answers
# so that you can  refer to them later.  Look also at the pod documentation in
# PG.pl and PGbasicmacros.pl  which you can also reach at
# http://webwork.math.rochester.edu/docs/techdescription/pglanguage/index.html)
                                  
# Check to see that the first answer was answered correctly.  If it was then we
# will ask further questions.

# The output of each answer evaluator consists of a single %ans_hash with (at
# least) these entries:
#       $ans_hash{score}        -- a number between 0 and 1
#       $ans_hash{correct_ans}  -- The correct answer, as supplied by the instructor
#       $ans_hash{student_ans}  -- This is the student's answer
#       $ans_hash{ans_message}  -- Any error message, or hint provided by
#                                                          the answer evaluator.
#       $ans_hash{type}   -- A string indicating the type of answer evaluator.
#                                         -- Some examples:
#                                               'number_with_units'
#                                               'function'
#                                               'frac_number'
#                                               'arith_number'
# For more details see
# http://webwork.math.rochester.edu/docs/docs/pglanguage/pgreference/answerhashdataype.html

# If they get the first answer right, then we'll ask a second part to the
# question ...

        # WATCH OUT!!:  BEGIN_TEXT and END_TEXT have to be on lines by
        # themselves and left justified!!!   This means you can't indent
        # this section as you might want to. The placement of BEGIN_TEXT
        # and END_TEXT is one of the very few formatting requirements in
        # the PG language.
