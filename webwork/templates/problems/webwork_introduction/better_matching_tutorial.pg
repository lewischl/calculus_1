##DESCRIPTION
##  an example matching problem
##ENDDESCRIPTION

##KEYWORDS('matching','tutorial')

## DBsubject('Algebra')
## DBchapter('Fundamentals')
## DBsection('Real Numbers')
## Date('spring 202w3')
## Author('silviana amethest')
## Institution('uwec')

# this derived from https://webwork.maa.org/pod/pg/lib/Match.html
########################################################################



########################################
# this file automatically moved
#	from set0.0_webwork_intro/better_matching_tutorial.pg 
#	to problems/webwork_introduction/better_matching_tutorial.pg 
#	on 2023-05-25 12:20:10.923275 by silviana amethyst.
# if this problem uses static images, they should also have been moved from that location to here.
# if not, look in the source directory for images that didn't make it.
########################################


DOCUMENT();

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "PGML.pl",
   #"source.pl",        # allows code to be displayed on certain sites.
   "PGcourse.pl",      # Customization file for the course
   
   # added for matching
   "PG.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"unionTables.pl",
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());



$ml = new_match_list();



	$ml->qa(
		'\( x^2 \)',
		'quadratic',
		'\( x^3 \)',
		'cubic',
		'\( x^3/x \)',
		'quadratic',
		'\( \log(2x+1) \)',
		'logarithmic',
		'\( 2^x \)',
		'exponential',
	);
    
    
    	$ml->extra(
		'linear',
		'quartic',
		'really curvy',
	);
    
    $ml->choose(5); # would show the first question and a random question while
    
    # After calling choose, use choose_extra to select which of the extra 'answers' will be given to each student. 
    #Note that unused answers are dumped into the list of extra 'answers' so the indexing may be difficult to grasp at first. 
    #(This can be stopped by doing the following: $ml->dumpExtra = "";)
    $ml->choose_extra([0], 2);
    
    #$ml->makeLast(
	#	'All of the above',
	#	'None of the above'
	#);
    
    $ml->ans_rule_len(10);


BEGIN_TEXT

This is an example of a "matching" problem.  

$PAR
Note that there are more options for letters than there are functions, and it's NOT guaranteed that each function gets a distinct matching option.

$PAR $HR $PAR

For each function, enter the letter of the word that best describes the function.

$PAR
\{ $ml->print_q() \}
$PAR
\{ $ml->print_a() \}

END_TEXT


ANS(str_cmp($ml->ra_correct_ans));


ENDDOCUMENT();

