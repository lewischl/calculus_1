##DESCRIPTION
##  Arithemetic problem: give the value of pi
##ENDDESCRIPTION

##KEYWORDS('arithmetic', 'pi')

## DBsubject('Algebra')
## DBchapter('Fundamentals')
## DBsection('Real Numbers')
## Date('')
## Author('')
## Institution('')

########################################################################



########################################
# this file automatically moved
#	from setproving_grounds/matching_tutorial.pg 
#	to problems/proving_grounds/matching_tutorial.pg 
#	on 2023-05-25 12:20:10.923275 by silviana amethyst.
# if this problem uses static images, they should also have been moved from that location to here.
# if not, look in the source directory for images that didn't make it.
########################################


DOCUMENT();

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "PGML.pl",
   #"source.pl",        # allows code to be displayed on certain sites.
   "PGcourse.pl",      # Customization file for the course
   
   # added for matching
   "PG.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"unionTables.pl",
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());



$ml = new_match_list();
$ml->qa(
"What's the answer to question 1?", "Ans 1",
"What's the answer to question 2?", "Ans 2",
"What's the answer to question 3?", "Ans 3"
);

# use pop-up-lists
$ml->rf_print_q(~~&pop_up_list_print_q);
# you may need to add more letters D=>"D", etc. 
$ml->ra_pop_up_list([No_answer=>"?",A=>"A",B=>"B",C=>"C"]);

$ml->choose(3);

# to add extra answers that show up in the
#    matching list, we would uncomment
#    (remove the leading "# " from) the two
#    lines below:
# $ml->extra("Extra Ans 1", "Extra Ans 2");
# $ml->choose_extra(2);
  
$ml->makeLast("None of the above");



$ml = new_match_list();
$ml->qa(
"What's the answer to question 1?", "Ans 1",
"What's the answer to question 2?", "Ans 2",
"What's the answer to question 3?", "Ans 3"
);

# use pop-up-lists
$ml->rf_print_q(~~&pop_up_list_print_q);
# you may need to add more letters D=>"D", etc. 
$ml->ra_pop_up_list([No_answer=>"?",A=>"A",B=>"B",C=>"C"]);

$ml->choose(3);

# to add extra answers that show up in the
#    matching list, we would uncomment
#    (remove the leading "# " from) the two
#    lines below:
# $ml->extra("Extra Ans 1", "Extra Ans 2");
# $ml->choose_extra(2);
  
$ml->makeLast("None of the above");


# no credit until all answers are correct
install_problem_grader(~~&std_problem_grader);
$showPartialCorrectAnswers = 0;

ANS( str_cmp( $ml->ra_correct_ans ) );

# the remainder of the code is included to
#    provide a sensible solution for the
#    student.

# the answers to the questions that were
#    asked, in order, are
@correctAns = @{$ml->ra_correct_ans};

# the following becomes necessary if we want
#    to figure out what questions were asked
#    so that we can give explanations for 
#    them.  
# it's useful to define an array of 
#    explanations that correspond to the
#    list of questions we might have asked
@explanations = (
"explanation for question 1",
"explanation for question 2",
"explanation for question 3"
);

# then find the questions that were asked
@askedQuestions = ();
foreach $q ( @{$ml->selected_q} ) {
  $i = 0;
  foreach $mq ( @{$ml->questions} ) {
    if ( $q eq $mq ) {
      push(@askedQuestions, $i);
      last;
    }
    $i++;
  } 
}
# now we know which questions were asked,
#    and can print the corresponding 
#    explanations for the solution
#SOLUTION(EV3(<<'END_SOLUTION'));
BEGIN_SOLUTION
$PAR SOLUTION $PAR
  
The answer to the first question is
$correctAns[0], because
$explanations[$askedQuestions[0]].

$PAR
The answer to the second question is
$correctAns[1], because
$explanations[$askedQuestions[1]].

END_SOLUTION

ENDDOCUMENT();

