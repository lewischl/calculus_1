##DESCRIPTION
##  find intervals where object is moving forward/backward, plus times at which it's stationary.
##ENDDESCRIPTION

##KEYWORDS('rates of change', 'derivatives')

## DBsubject('Calculus')
## DBchapter('Derivatives')
## DBsection('Rates of Change')
## Date('')
## Author('silviana amethyst')
## Institution('UWEC')

########################################################################

DOCUMENT();

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "PGML.pl",
   "PGcourse.pl",      # Customization file for the course
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"PGauxiliaryFunctions.pl",
"extraAnswerEvaluators.pl"
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#
Context("Numeric");


SRAND($team_exam2_seed);
$setseed = "set.seed($team_exam2_seed); $team_exam2_seed";

Context()->variables->add(t => 'Real');


$stationary1 = random(2,5,1);
$stationary2 = random(2,5,1);

if ($stationary1==$stationary2){
$stationary2 = $stationary2+random(2,5,1);
}

$scale = random(2,5,1);
$shift = random(2,5,1);

$a = $stationary1;
$b = $stationary2;

$s = Formula("($scale*2*t^3 - $scale*3*($a+$b)*t^2 + $scale*6*$a*$b*t+$shift)")->reduce;

$forward="[0,$stationary1)U($stationary2,inf)";
$backward="($stationary1,$stationary2)";

##############################################################
#
#  Text
#
#

BEGIN_PGML
A girl is riding a bicycle down a very long hallway.  Her position is well-modeled by a function of time, called [`s`], for times [`t \geq 0`].  Let [``` s(t) = [$s]```]

---

Answer these questions about her instantaneous rate of change:

* Time intervals moving forward: [_____]{interval_cmp($forward, strings=>["none"])}.  Use interval notation.  Enter _none_ if she never goes forward after [`t=0`].

* Time intervals moving backward:  [_____]{interval_cmp($backward, strings=>["none"])}.  Use interval notation.  Enter _none_ if she never goes backward after [`t=0`].

* Times stationary: [_____]{Compute("$stationary1, $stationary2")->cmp}   Enter your answer
as a comma separated list, with lower values first.  Enter _none_ if the girl
is never at rest.

---

Hints: 
* time starts at [`t=0`]
* pay particular attention to the type of braces you use!
END_PGML

ENDDOCUMENT();
