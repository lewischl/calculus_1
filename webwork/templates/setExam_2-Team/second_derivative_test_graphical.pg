##DESCRIPTION
##  Graphical application of the second derivative test
##ENDDESCRIPTION

##KEYWORDS('applications of derivatives', 'second derivative test', 'graphical')

## DBsubject('Calculus')
## DBchapter('Applications of Derivatives')
## DBsection('Second derivative test')
## Date('')
## Author('silviana amethyst')
## Institution('uwec')

########################################################################

DOCUMENT();

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "PGML.pl",
   #"source.pl",        # allows code to be displayed on certain sites.
   "PGcourse.pl",      # Customization file for the course
   "parserPopUp.pl",
   "PGuwecTikZutils.pl", #Custom TikZ code
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#
Context("Numeric");

SRAND(271827);
$setseed = "set.seed(271827); 271827";

# set up the roots of the second derivative
$r1 = random(-2,2,1);
$sep = random(1,3,1);
$r2 = $r1 + $sep;


# now the critical points.  i can make these up.
@c = ();
# first crit point is where the double root is, so that the 2nd der test fails.
$c[0] = $r1;
$c[1] = ($r1+$r2)/2;
$c[2] = $r2+0.5;

$classification1 = PopUp(
  ["local minimum","local maximum","fail to classify"],
  "fail to classify");

$classification2 = PopUp(
  ["local minimum","local maximum","fail to classify"],
  "local maximum");
  
$classification3 = PopUp(
  ["local minimum","local maximum","fail to classify"],
  "local minimum");

# set the x limits for plotting
@xlim = ();
$xlim[0] = $r1-1;
$xlim[1] = $r2+2;

# this what they're given
$f_doubleprime = Formula("(x-$r1)^2 * (x-$r2)")->reduce;


# critical points of f', found via matlab
@crit_of_f_doubleprime = ();
$crit_of_f_doubleprime[0] = $r1; # was a double root, so yes.
$crit_of_f_doubleprime[1] = $r1/3 + (2*$r2)/3;



$xtick = 1;
$ytick = 10;

@ylim = ();
$ylim[0] = $f_doubleprime->eval(x=>$crit_of_f_doubleprime[1] )-3;
$ylim[1] = max($f_doubleprime->eval(x=>$xlim[0] ),$f_doubleprime->eval(x=>$xlim[1] ));

$graph1 = GraphWithTikZ(function => [[$f_doubleprime,dmin => $xlim[0],dmax => $xlim[1],label=>"f''(x)"]],
                        xmin => $xlim[0],xmax => $xlim[1],ymin => $ylim[0],ymax =>$ylim[1],smooth=>'smooth',ytick => $ytick,xtick => $xtick,useLegend=>1);
                        

##############################################################
#
#  Text
#
#

BEGIN_PGML
The second derivative test is a way to classify critical points of a function.  The below graph depicts [`f''(x)`], the *second* derivative of a function [`f`].

>>[@ image(insertGraph($graph1), width => 500, height => 500) @]*<<



---

For each given critical point of [`f`] (that is, I've computed the roots of [`f'`] for you -- we have neither [`f`] nor [`f'`] at-hand in this problem), use the second derivative test to determine whether [`f`] has a local min, a local max, or indicate if the classification test fails.

* At [`x = [$c[0]]`], [`f`] has a [_]{$classification1}

* At [`x = [$c[1]]`], [`f`] has a [_]{$classification2}

* At [`x = [$c[2]]`], [`f`] has a [_]{$classification3}

END_PGML

ENDDOCUMENT();
