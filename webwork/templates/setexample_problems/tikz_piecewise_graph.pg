##DESCRIPTION
##  Limit Question
##ENDDESCRIPTION

##KEYWORDS('limit','infinity')

## DBsubject('Calculus')
## DBchapter('Limits')
## DBsection('Continuity')
## Date('Fall 2022, Summer 2023')
## Author('Erich Jauch, silviana amethyst')
## Institution('UWEC')

########################################################################



########################################
# this file automatically moved
#	from setExam_1-Team/LimitGraphicalSolve.pg 
#	to setlimits_review_quiz/LimitGraphicalSolve.pg 
#	on 2023-05-26 12:01:24.489989 by silviana amethyst.
# if this problem uses static images, they should also have been moved from that location to here.
# if not, look in the source directory for images that didn't make it.
########################################




########################################
# this file automatically moved
#	from setlimits_review_quiz/LimitGraphicalSolve.pg 
#	to setquiz_-_limits_review_-_problems_same_for_all_students/LimitGraphicalSolve.pg 
#	on 2023-07-01 15:08:39.906823 by silviana amethyst.
# if this problem uses static images, they should also have been moved from that location to here.
# if not, look in the source directory for images that didn't make it.
########################################


DOCUMENT();

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "PGML.pl",
   #"source.pl",        # allows code to be displayed on certain sites.
   "parserPopUp.pl",
   "PGuwecTikZutils.pl", #Custom TikZ code
   "PGcourse.pl",      # Customization file for the course
);

COMMENT("example of: generating a tikz graph, rendering in a PGML problem");

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#
Context("Numeric");


@xlim = ();
@ylim = ();
@ypoint =();
@f = ();

# transition points
$xlim[0] = random(-4,-2,2);
$xlim[1] = -1*$xlim[0];
$xlim[2] = $xlim[1]+2;

$ylim[0] = random(2,6,2);

# jumpy discontinuity
$ypoint[0] = $ylim[0] - 4;

# formulas for the first two pieces
$f[0] = Formula("(1/(-1*$xlim[0]*2))*(x-$xlim[0])^2 + $ylim[0]");
$f[1] = Formula("-1/(-1*$xlim[0]*2)*(x-$xlim[0])^2 + $ylim[0]");

# jump discontinuities
$ypoint[1] = $f[1]->eval(x=>$xlim[1]);

$ypoint[2] = $ypoint[1] - 2;

if ($ypoint[2]==0) {
$ypoint[2] = -2;
}

# third piece
$f[2] = Formula("$ypoint[2]*($xlim[1]-$xlim[2])^2/(x-$xlim[2])^2");

# set up some graphing axis limits
$dim = abs($xlim[0]) + 10;
$ymax = $dim;
$tick = 2;


# put answers in an array
@ans = ();

$ans[0] = $ylim[0];
$ans[1] = "DNE";
$ans[2] = "-inf";

# code using Andy Swanson's library for plotting using tikz.

$graph1 = GraphWithTikZ(function => [   # functions are an array of "Formula" objects.  dmin and dmax set the values for evaluation for plotting.  stay away from infinite discontinuities!!!
                                     [$f[0],dmin => -$dim,dmax => $xlim[0],rightEnd => 'open'], #using "open" for jumps /  open circles
                                     [$f[1],dmin => $xlim[0],dmax => $xlim[1],leftEnd => 'open',rightEnd => 'open'],
                                     [$f[2],dmin => $xlim[1], dmax=> $dim, leftEnd =>'open']
                                    ],
points => [[Point(($xlim[0],$ylim[0])),color=>"white",label=>" "], # an array of point objects for marking jumps, etc.  the "color" "white" makes the circle generated on the curves with the "leftEnd" value be white.
           [Point(($xlim[0],$ypoint[0])),label=>" "],
           [Point(($xlim[1],$ypoint[1])),color=>"white",label=>" "],
           [Point(($xlim[1],$ypoint[2])),color=>"white",label=>" "]],
    xmin => -$dim,xmax => $dim,ymin =>-$ymax,ymax =>$ymax, # axis limits.  these should be computed, as in this example
    smooth=>'smooth', #smooth, not cornery
    ytick => $tick,xtick => $tick); # where to mark the axis.  xtick, ytick is the distance between marks.  they do not have to be the same.

##############################################################
#
#  Text
#
#

BEGIN_PGML
We have a function [`f(x)`] graphed below:

>>[@ image(insertGraph($graph1), width => 400, height => 400) @]*<<

Find the following limits (Enter DNE if the limit does not exist):

(a) [`\displaystyle \lim_{x\rightarrow[$xlim[0]]}f(x)=`] [_____]{$ans[0]}

(b) [`\displaystyle \lim_{x\rightarrow[$xlim[1]]}f(x)=`] [_____]{$ans[1]}

(c) [`\displaystyle \lim_{x\rightarrow[$xlim[2]]}f(x)=`] [_____]{$ans[2]}
END_PGML

ENDDOCUMENT();
