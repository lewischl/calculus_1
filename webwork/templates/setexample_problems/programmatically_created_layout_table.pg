## MLTleader(1)
## MLT(calculus_singlevariable_absolute_x_to_6)


#DESCRIPTION
# Find limits (intuitively or by experimental calculations).
#ENDDESCRIPTION

##Tagged by ynw2d

## DBsubject(Calculus - single variable)
## DBchapter(Limits and continuity)
## DBsection(Finding limits using graphs)
## Level(3)
## TitleText1('Calculus: Early Transcendentals')
## AuthorText1('Stewart')
## EditionText1('6')
## Section1('2.3')
## Problem1('2')
## KEYWORDS('Calculus')
## MO(1)-TF-12/18/2014



########################################
# this file automatically moved
#	from local/Library/Rochester/setLimitsRates1_5Graphs/ur_lr_1-5_3.pg 
#	to setlimits_the_limit_laws/ur_lr_1-5_3.pg 
#	on 2023-05-26 12:01:24.489989 by silviana amethyst.
# if this problem uses static images, they should also have been moved from that location to here.
# if not, look in the source directory for images that didn't make it.
########################################




########################################
# this file automatically moved
#	from setlimits_the_limit_laws/ur_lr_1-5_3.pg 
#	to setlimits_-_limit_laws_-_training_-_new_limits_from_old_using_the_limit_laws/ur_lr_1-5_3.pg 
#	on 2023-07-01 15:08:39.906823 by silviana amethyst.
# if this problem uses static images, they should also have been moved from that location to here.
# if not, look in the source directory for images that didn't make it.
########################################


DOCUMENT();        # This should be the first executable line in the problem.
loadMacros(
  "PGstandard.pl",
  "PGchoicemacros.pl",
  "AnswerFormatHelp.pl",
  "MathObjects.pl",
  "PGgraphmacros.pl",
  "PGcourse.pl",
  "customCSS.pl",
 'niceTables.pl',
 "PGML.pl",
);
Context('Numeric');

COMMENT("example of: programmatically constructing a LayoutTable");
$showPartialCorrectAnswers=1;

# define a broken graph f and a broken graph g:
# define the break points where we switch from one hermite function to the other
# and the value of the function at that point



@ySlice1 = NchooseK(4,4);
$f1y[0] = $ySlice1[0];
$f2y[0] = $ySlice1[1];
$g1y[0] = $ySlice1[2];
$g2y[0] = $ySlice1[3];

foreach my $i (1..5) {
     do {
          @ySlice2 = NchooseK(4,4);
     } while ($ySlice1[0] == $ySlice2[0] or $ySlice1[1] == $ySlice2[1] or  $ySlice1[2] == $ySlice2[2] or $ySlice1[3] == $ySlice2[3]);
     $f1y[$i] = $ySlice2[0];
     $f2y[$i] = $ySlice2[1]; 
     $g1y[$i] = $ySlice2[2];
     $g2y[$i] = $ySlice2[3];
     @ySlice1 = @ySlice2;
}

if ($f1y[0] < $f1y[1]) { $f1yp[0] = 1; } else {$f1yp[0] = -1;}
if ($f2y[0] < $f2y[1]) { $f2yp[0] = 1; } else {$f2yp[0] = -1;}
if ($g1y[0] < $g1y[1]) { $g1yp[0] = 1; } else {$g1yp[0] = -1;}
if ($g2y[0] < $g2y[1]) { $g2yp[0] = 1; } else {$g2yp[0] = -1;}

if ($f1y[4] < $f1y[5]) { $f1yp[5] = 1; } else {$f1yp[5] = -1;}
if ($f2y[4] < $f2y[5]) { $f2yp[5] = 1; } else {$f2yp[5] = -1;}
if ($g1y[4] < $g1y[5]) { $g1yp[5] = 1; } else {$g1yp[5] = -1;}
if ($g2y[4] < $g2y[5]) { $g2yp[5] = 1; } else {$g2yp[5] = -1;}

foreach my $i (1..4) {
     $f1yp[$i] = 0;
     if ($f1y[$i - 1] < $f1y[$i] and $f1y[$i] < $f1y[$i+1]) { $f1yp[$i] = 1; }
     if ($f1y[$i - 1]  > $f1y[$i] and $f1y[$i] > $f1y[$i+1]) { $f1yp[$i] = -1; }

     $f2yp[$i] = 0;
     if ($f2y[$i - 1] < $f2y[$i] and $f2y[$i] < $f2y[$i+1]) { $f2yp[$i] = 1; }
     if ($f2y[$i - 1]  > $f2y[$i] and $f2y[$i] > $f2y[$i+1]) { $f2yp[$i] = -1; }

     $g1yp[$i] = 0;
     if ($g1y[$i - 1] < $g1y[$i] and $g1y[$i] < $g1y[$i+1]) { $g1yp[$i] = 1; }
     if ($g1y[$i - 1]  > $g1y[$i] and $g1y[$i] > $g1y[$i+1]) { $g1yp[$i] = -1; }

     $g2yp[$i] = 0;
     if ($g2y[$i - 1] < $g2y[$i] and $g2y[$i] < $g2y[$i+1]) { $g2yp[$i] = 1; }
     if ($g2y[$i - 1]  > $g2y[$i] and $g2y[$i] > $g2y[$i+1]) { $g2yp[$i] = -1; }
}

@xSlice = NchooseK(4,2);
@ySlice = NchooseK(5, 2);
$xf = $xSlice[0];
$xg = $xSlice[1];

do {
     $yf = random(-1, 4, 1);
} while ($yf == $f1y[$xf] or $yf == $f2y[$xf]);

do {
     $yg = random(-1, 4, 1);
} while ($yg == $g1y[$xf] or $yg == $g2y[$xf]);



# define the functions
$hermite_f1 = new Hermite( [ -1  , 0,  1, 2 , 3, 4 ],
                   [ @f1y ],
                   [ @f1yp  ]);
$hermite_f2 = new Hermite( [ -1  , 0,  1, 2 , 3, 4 ],
                   [ @f2y ],
                   [ @f2yp  ]);
$hermite_g1 = new Hermite( [ -1  , 0,  1, 2 , 3, 4 ],
                   [ @g1y ],
                   [ @g1yp  ]);
$hermite_g2 = new Hermite( [ -1  , 0,  1, 2 , 3, 4 ],
                   [ @g2y ],
                   [ @g2yp  ]);

# define the broken functions themselves -- we'll need them to answer questions.
sub f_rule {
	 my $x = shift;
     my $out;
     if ($x < $xf ) {
        $out = $hermite_f1->rf_f->($x);
     } elsif ($x == $xf) {
     	$out = $yf;
     } else {
        $out = $hermite_f2->rf_f->($x);
     }
      $out;
};
sub g_rule {
	my $x = shift;
    my $out;
    if ($x < $xg ) {
    	$out = $hermite_g1->rf_f->($x);
     } elsif ($x == $xg) {
        $out = $yg;
     } else {
        $out = $hermite_g2->rf_f->($x);
     }
     $out;
};


# plot the f graph

$graphf = init_graph(-2,-2,5,5,grid =>[7,7], axes => [0,0],'size'=>[800,800]);
$graphg = init_graph(-2,-2,5,5,grid =>[7,7], axes => [0,0],'size'=>[800,800]);
$f1 = new Fun($hermite_f1->rf_f,$graphf);
$f2 = new Fun($hermite_f2->rf_f,$graphf);
$graphf->stamps(open_circle($xf, $hermite_f1->rf_f->($xf), 'red')   );
$graphf->stamps(open_circle($xf, $hermite_f2->rf_f->($xf), 'red')   );
$graphf ->stamps( closed_circle($xf, $yf, 'red') ); # value at $xf;
$f1->color('red');
$f2->color('red');
# restrict the two partial graph domains so that only the 'active' one is drawn
$f1->domain(-1, $xf);
$f2->domain($xf, 4);

#plot the g graph
$g1 = new Fun($hermite_g1->rf_f,$graphg);
$g2 = new Fun($hermite_g2->rf_f,$graphg);
$graphg->stamps(open_circle($xg, $hermite_g1->rf_f->($xg), 'blue')  );
$graphg->stamps(open_circle($xg, $hermite_g2->rf_f->($xg), 'blue')  );
$graphg ->stamps(closed_circle($xg, $yg, 'blue') ); # value at $xg;
$g2->color('blue');
$g2->color('blue');
# restrict the two partial graph domains so that only the 'active' one is drawn
$g1->domain(-1, $xg);
$g2->domain($xg, 4);


TEXT(beginproblem());

$showHint=-1;

# draw the graphs

BEGIN_PGML
[@ openDiv({ "class" => "problemPurpose" }) @]*
This problem has you compute a bunch of different things from the graphs of two functions.  The parts are all either function values or limits.  This reinforces the difference between limits and function values: the limit is where the function is going -- a dynamic process -- whereas the function value is just concerned with the value at that one point.  
[@ closeDiv() @]*


[@ openDiv({ "class" => "importantFormula" }) @]*
This problem has several parts about function composition, which is where outputs of one function become inputs to the next.  


In particular for notation,
* [`f(g(x))`] is the composition of [`g`] into [`f`].  
* Outputs of [`g`] become inputs to [`f`].  
* It's as if the vertical axis for the plot of [`g`] is the horizontal axis for [`f`].   Direction matters!

If we want to find [`` \lim_{x \to 2^-} f(g(x))``]:
1. find [`` \lim_{x \to 2^-} g(x)``], and call it [``L_g``]. Pay attention to the direction with which [`g \to L_g`]:
    * Does it go from above?  Then we have [``g \to L_g^+``].
    * From below?  Then we have [``g \to L_g^-``].
2. find [`` \lim_{x \to L_g^\pm} f(x) ``], paying attention to the direction.  This limit is your answer.
[@ closeDiv() @]*


I put a Kahn Academy video down at the bottom, too ðŸ˜Š.
END_PGML






BEGIN_TEXT

$PAR$HR$PAR

$BCENTER
\{ begintable(2) \}
\{ row( image( insertGraph($graphf) ,width=>350,height=>350, tex_size =>350 ), image( insertGraph($graphg),width=>350,height=>350 , tex_size =>350 )   )\}
\{ row( '\(f(x)\)', '\(g(x)\)') \}
\{ endtable() \}

$ECENTER
END_TEXT

sub rnd {
	my $x = shift;
	my $places = shift;
	$places = 0 unless defined($places);
	my $sign = ($x <0 ) ? -1 : 1;
	$x = abs($x);
	
	$x = int( $x*10 **(-$places) +.5) *10 **($places);
	$sign*$x;
}
# now construct the questions
@questions = ();
@answers = ();

$prompts[0] = "\displaystyle \lim_{x\to $xf^-} [f(x) + g(x) ]  ";
$answers[0] = num_cmp(rnd( f_rule($xf-.00001) +g_rule($xf-.00001)  ), strings=>['DNE'] );  # we are expecting integer answers

$prompts[1] = "\displaystyle \lim_{x\to $xf^+} [f(x) + g(x) ]  ";
$answers[1] = num_cmp(rnd( f_rule($xf+.00001) +g_rule($xf+.00001)  ), strings=>['DNE'] );  # we are expecting integer answers

$prompts[2] = "f($xf) + g($xf) ";
$answers[2] = num_cmp(f_rule($xf) + g_rule($xf), strings=>['DNE'] );

$prompts[3] = "\displaystyle \lim_{x\to $xf^-} f(x)g(x)   ";
$answers[3] = num_cmp(rnd( f_rule($xf-.00001)*g_rule($xf-.00001) ), strings=>['DNE'] );  # we are expecting integer answers

$prompts[4] = "\displaystyle \lim_{x\to $xf^+} f(x)g(x)   ";
$answers[4] = num_cmp(rnd( f_rule($xf+.00001)*g_rule($xf+.00001)  ), strings=>['DNE'] );  # we are expecting integer answers

$prompts[5] = "f($xf)g($xf) ";
$answers[5] = num_cmp(f_rule($xf)*g_rule($xf), strings=>['DNE'] );

$prompts[6] = "\displaystyle \lim_{x\to $xf^-} f( g(x) )   ";
$answers[6] = num_cmp(rnd( f_rule(g_rule($xf-.00001)  ) ), strings=>['DNE'] );  # we are expecting integer answers

$prompts[7] = "\displaystyle \lim_{x\to $xf^+} f( g(x) )   ";
$answers[7] = num_cmp(rnd( f_rule(g_rule($xf+.00001) ) ), strings=>['DNE'] );  # we are expecting integer answers

$prompts[8] = "f( g($xf) ) ";
$answers[8] = num_cmp(f_rule( g_rule($xf) ), strings=>['DNE'] );

#check for zeros in answering the division limits
$prompts[9] = "\displaystyle \lim_{x\to $xf^-} f(x)/g(x)   ";
$answers[9] =   ( not rnd(g_rule($xf-.00001) ) and  rnd(f_rule($xf-.00001) ) ) ? num_cmp('DNE', strings=>['DNE'])        # if g is zero, but f is not
           : num_cmp(rnd( f_rule($xf-.00001)/g_rule($xf-.00001) , -3 ), tol =>.002, strings=>['DNE'] );  # the chances of g being identically zero are small since the derivatives at defined points are never zero.

# we are expecting integer answers
$prompts[10] = " \displaystyle \lim_{x\to $xf^+} f(x)/g(x)   ";
$answers[10] = ( not rnd(g_rule($xf+.00001) ) and  rnd(f_rule($xf+.00001) ) ) ? num_cmp('DNE', strings=>['DNE'])
           : num_cmp(rnd( f_rule($xf+.00001)/g_rule($xf+.00001) , -3 ), tol =>.002, strings=>['DNE'] ) ;

# we are expecting integer answers
$prompts[11] = " f($xf)/g($xf) ";
$answers[11] = (rnd(g_rule($xf)) ) ? num_cmp( rnd(f_rule($xf)/g_rule($xf), -3), tol =>.002, strings=>['DNE'] ) : num_cmp('DNE', strings=>['DNE']);

$prompts[12] = " \displaystyle \lim_{x\to $xg^-} [f(x) + g(x) ]  ";
$answers[12] = num_cmp(rnd( f_rule($xg-.00001) +g_rule($xg-.00001) ), strings=>['DNE'] );   # we are expecting integer answers

$prompts[13] = " \displaystyle \lim_{x\to $xg^+} [f(x) + g(x) ]  ";
$answers[13] = num_cmp(rnd( f_rule($xg+.00001) +g_rule($xg+.00001)  ), strings=>['DNE'] );  # we are expecting integer answers

$prompts[14] = " f($xg) + g($xg) ";
$answers[14] = num_cmp(f_rule($xg) + g_rule($xg), strings=>['DNE'] );

$prompts[15] = " \displaystyle \lim_{x\to $xg^-} f(x)g(x)   ";
$answers[15] = num_cmp(rnd( f_rule($xg-.00001)*g_rule($xg-.00001) ), strings=>['DNE'] );  # we are expecting integer answers

$prompts[16] = " \displaystyle \lim_{x\to $xg^+} f(x)g(x)   ";
$answers[16] = num_cmp(rnd( f_rule($xg+.00001)*g_rule($xg+.00001) ), strings=>['DNE'] );  # we are expecting integer answers

$prompts[17] = " f($xg)g($xg) ";
$answers[17] = num_cmp(f_rule($xg)*g_rule($xg), strings=>['DNE'] );

$prompts[18] = " \displaystyle \lim_{x\to $xg^-} f( g(x) )   ";
$answers[18] = num_cmp(rnd( f_rule( g_rule($xg-.00001) )), strings=>['DNE'] ) ;  # we are expecting integer answers

$prompts[19] = " \displaystyle \lim_{x\to $xg^+} f( g(x) )   ";
$answers[19] = num_cmp(rnd( f_rule( g_rule( $xg + .00001 ) ) ), strings=>['DNE']  );  # we are expecting integer answers

$prompts[20] = " f( g($xg) ) ";
$answers[20] = num_cmp(f_rule( g_rule($xg) ), strings=>['DNE'] );

#check for zeros in answering the division limits
$prompts[21] = " \displaystyle \lim_{x\to $xg^-} f(x)/g(x)   ";
$answers[21] = ( not rnd(g_rule($xg-.00001) ) and  rnd(f_rule($xg-.00001) ) ) ? num_cmp('DNE', strings=>['DNE'])        # if g is zero, but f is not
           : num_cmp(rnd( f_rule($xg-.00001)/g_rule($xg-.00001) , -3 ), tol =>.002, strings=>['DNE'] );  # the chances of g being identically zero are small since the derivatives at defined points are never zero.

# we are expecting integer answers
$prompts[22] = " \displaystyle \lim_{x\to $xg^+} f(x)/g(x)   ";
$answers[22] = ( not rnd(g_rule($xg+.00001) ) and  rnd(f_rule($xg+.00001) ) ) ? num_cmp('DNE', strings=>['DNE'])
           : num_cmp(rnd( f_rule($xg+.00001)/g_rule($xg+.00001) , -3 ), tol =>.002, strings=>['DNE'] ) ;

# we are expecting integer answers
$prompts[23] = " f($xg)/g($xg) ";
$answers[23] = (rnd(g_rule($xg)) ) ? num_cmp( rnd(f_rule($xg)/g_rule($xg), -3), tol =>.002, strings=>['DNE'] ) : num_cmp('DNE', strings=>['DNE']);





BEGIN_TEXT

$PAR
Use the graphs of \( f(x) \) and \( g(x) \) to evaluate each quantity.$BR
Write $BITALIC DNE$EITALIC if the limit or value does not exist (or if it's infinity).

$PAR

END_TEXT






@rows = ();

for my $i (0..7){
    my $a = $i*3 + 0;
    my $b = $i*3 + 1;
    my $c = $i*3 + 2;
    push(@rows, [ '\( ' . $prompts[$a] . ' = \) ' . ans_rule(10),
                  '\( ' . $prompts[$b] . ' = \) ' . ans_rule(10),
                  '\( ' . $prompts[$c] . ' = \) ' . ans_rule(10) ] );
}



BEGIN_PGML
[@ LayoutTable( [ @rows ], align => 'lll', tablecss=>'border:solid 1px;     border-collapse: separate; border-radius: 5px; padding: 10px; border-spacing: 10px 0px')  @]*
END_PGML




BEGIN_TEXT

$PAR$HR$PAR

For function composition, \(f(g(x))\), the inside function happens first.  Evaluate the inside function's limit, and note whether that limiting value is approached from above or below.  Then, the outside function should be tested for a limit at this intermediate value (in the direction noted earlier).

$PAR 

Check out this video on limits and function composition from Khan Academy: $PAR

$BCENTER
\{ youtube(RgfKNIkpFWc) \}
$ECENTER

END_TEXT


for my $i (0..23){
ANS($answers[$i]);
}

ENDDOCUMENT();        # This should be the last executable line in the problem.
