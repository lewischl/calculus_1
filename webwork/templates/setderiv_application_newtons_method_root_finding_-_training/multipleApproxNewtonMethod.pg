##DESCRIPTION
## Calculus problem: Newton's Method problem requesting mulitple approximations
##ENDDESCRIPTION

##KEYWORDS('calculus', 'approximation', 'derivative')

## DBsubject('Calculus')
## DBchapter('Applications of the Derivative')
## DBsection('Newtons's Method')
## Date('8/1/2022')
## Author('Erich Jauch, silviana amethyst')
## Institution('')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('1')

########################################################################



########################################
# this file automatically moved
#	from set4.8_newtons_method/multipleApproxNewtonMethod.pg 
#	to setderiv_application_newtons_method_root_finding/multipleApproxNewtonMethod.pg 
#	on 2023-05-26 12:01:24.489989 by silviana amethyst.
# if this problem uses static images, they should also have been moved from that location to here.
# if not, look in the source directory for images that didn't make it.
########################################




########################################
# this file automatically moved
#	from setderiv_application_newtons_method_root_finding/multipleApproxNewtonMethod.pg 
#	to setderiv_application_newtons_method_root_finding_-_training/multipleApproxNewtonMethod.pg 
#	on 2023-07-01 15:08:39.906823 by silviana amethyst.
# if this problem uses static images, they should also have been moved from that location to here.
# if not, look in the source directory for images that didn't make it.
########################################


DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "PGML.pl",
   #"source.pl",        # allows code to be displayed on certain sites.
   "PGcourse.pl",      # Customization file for the course
   "PGuwecTikZutils.pl", #Custom TikZ code
);
# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#
Context("Numeric");

$n = random(1,4,1);

$n = 4;
@x = ();
if ($n==1) {
$f = Formula("x^5 - x-1");
$fprime = Formula("5x^4-1");
$x[0] = 1;
}
elsif($n==2) {
$f = Formula("x^5 - x+1");
$fprime = Formula("5x^4-1");
$x[0] = 1;
}
elsif ($n==3) {
$f = Formula("-x^5+x-1");
$fprime = Formula("-5x^4+1");
$x[0] = -1;
}
else {
$f = Formula("-x^5+x+1");

$fprime = Formula("-5x^4+1");
$x[0] = -1;
}
@f = ();
@fprime = ();

foreach my $i (0..3) {
$j = $i+1;
$f[$i] = $f->eval(x=>$x[$i]);
$fprime[$i] = $fprime->eval(x=>$x[$i]);
$x[$j] = $x[$i] - $f[$i]/$fprime[$i];
}

Context()->variables->add(xn => ['Real',TeX=>"x_n"]);
$fn = $f->substitute(x => "xn");
$fprimen = $fprime->substitute(x => "xn");

$graph1 = GraphWithTikZ(function => [$f],xmin => -3,xmax => 3,ymin => -3,ymax => 3,dmin => -3,dmax => 3,smooth=>'smooth');

##############################################################
#
#  Text
#
#

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

BEGIN_PGML

[@ openDiv({ "class" => "problemPurpose" }) @]*
This problem offers training on a root-finding algorithm using the first derivative as a proxy for the function in an iterative process.
[@ closeDiv() @]*

"Newton's Method" is a root-finding algorithm.  It finds the [`x`] such that [`f(x) = 0`].  The single-variable method we study here is the first step towards its application in multi-variable situations, where the "roots" might represent robot designs, steady states of chemical systems, and fixed points of changing systems such as coupled oscillators.

Here's a super short version of the method, omitting many details and pitfalls.  It's a starting point.

[@ openDiv({ "class" => "importantFormula" }) @]*
Newton's method for solving [`f(x_\ast) = 0`]

1. Get initial value [`x_0`].  

2. Iterate using [``x_{n+1} =  x_n - \frac{f(x_n)}{f'(x_n)} ``]

[@ closeDiv() @]*

The "iterate" step computes through a sequence of approximations [`x_0, x_1, x_2, \ldots`] __hopefully__ converging to a solution [`x_\ast`] with [`f(x_\ast) \approx 0`].  

---

END_PGML

BEGIN_PGML
The graph below is the function [`f(x)=[$f]`]

>>[@ image(insertGraph($graph1), width => 300, height => 300) @]*<<

üéØ Use Newton's Method to find the first [`4`] approximations the real root of [`f(x) = [$f]`] with an initial value of [`x_0 =[$x[0]]`]. (Use lots of decimal places, or exact numbers)

[`x_1=`] [____]{$x[1]}

[`x_2=`] [____]{$x[2]}

[`x_3=`] [____]{$x[3]}

[`x_4=`] [____]{$x[4]}

---

I do have some suggestions on doing the computations.  In this problem, I offer the "ans trick" on a TI calculator.


[@ openDiv({ "class" => "inProblemHint" }) @]*
*The "ans trick" for Newton's Methed on a TI calculator*


At the normal calculator screen on a TI-84 calculator:

1. Type the value of [`x_0`].
2. Press [|enter|]*.  Now [|ans|]* is [`x_0`].
3. Type the iterative formula for Newton's method with your [`f`], but instead of [`x`] use [|ans|]*.
    * So, type [|ans - (f(ans)) / (f'(ans)) |]*, with your [`f`] and [`f'`].
4. Press [|enter|]* to compute [`x_1`].
5. Recall the formula for Newton's method using [|entry|]*  ([|2nd-enter|]*).  
6. Press [|enter|]* to compute [`x_2`].
7. Goto step 5 üîÅ

[@ closeDiv() @]*


END_PGML

##############################################################
#
#  Solutions
#
#
BEGIN_PGML_SOLUTION
We begin that recalling that the Newton's Method says that

[`\displaystyle x_{n+1}=x_n-\frac{f(x_n)}{f^\prime(x_n)}=x_n - \frac{[$fn]}{[$fprimen]}`]

This leads us to our iterative process to find our 4 solutions:

[`\displaystyle x_1= [$x[0]] - \frac{[$f[0]]}{[$fprime[0]]}=[$x[1]]`],

[`\displaystyle x_2= [$x[1]] - \frac{[$f[1]]}{[$fprime[1]]}=[$x[2]]`],

[`\displaystyle x_3= [$x[2]] - \frac{[$f[2]]}{[$fprime[2]]}=[$x[3]]`],

[`\displaystyle x_4= [$x[3]] - \frac{[$f[3]]}{[$fprime[3]]}=[$x[4]]`].
END_PGML_SOLUTION

ENDDOCUMENT();        
